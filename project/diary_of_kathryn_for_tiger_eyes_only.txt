Test Iterations:
====
Here are the test runs:
  - Test Iter 0 (Infinite Loops I):
    --> Passes: none
    --> Infinite loops caused by program termination.
  - Test Iter 1 (Infinite Loops II):
    - Implemented std::cin check.
    --> Passes: none
    --> Remaining infinite loops caused by buffer overflows.
  - Test Iter 2 (Use of std::getline()):
    - Implementation of console_input module. 
    --> Introduction of module creates a new bug.
  - Test Iter 3 (Double prompt):
    - Fixed errors in console input implementation.
    --> It is now clear that some prompts are doubled.
  - Test Iter 4 (Diction):
    - Changed the loop condition again to check for eof.
    --> Failures still exist due to inconsistencies and errors in expected
        output.
  - Test Iter 5 (Account Balances):
    - Adjustment of output contents wording for consistency e.g.
      "Please enter a command" vs "Please enter a command user"
    - Adjustment of whitespace in test files
    - Adding missing command prompts (e.g. at the end of file, for logout)
    --> Failures still occur due to account balance prompts in program.
  - Test Iter 6 (Balance Discrepencies):
    - Adding output of account balances after certain functions.
    - Calculating missing account balance checks to .out files.
    --> Some test failures are due to actual balance not matching expected
  - Test Iter 7 (Current?) :
    - Fixing sources of calculation discrepencies.
- enab004
    - found that withdrawal deducted from limit as admin
Buffer Overflows (Test Iter 1)
====
Problem:
----
Certain tests would cause infinite loops with inputs that were too large.

Cases
----
...

Solution:
---
- console_input, commands.cc:
  In response to failures related to buffer overflows, I decided to make
    functions GetString, GetInteger, and GetDouble. Since the commands class is
    pretty crowded and the functionality is relevant to main, I elected to place
    it in a new class/namespace as "ConsoleInput", implemented as static
    functions. The use of this function accomplishes the following:
      a. Resolves the bug revealed by our tests
      b. Prevents this bug from occuring in locations not revealed in our tests
      c. Reduces clutter in the code due to the 2+ lines needed for this behaviour
      d. If our new std::getline approach causes issues in future, all instances
          of the pattern can be fixed at once.
        


Console Input Invalidity (Test Iter 2)
===
Problem:
----
Failures arose after the program was restructured to use strings instead of C
arrays.

Cases Affected:
----
- depo003.out

Solution:
---
This test case tests for invalid symbols, and failed where it had passed
before as a result of the change in console input extraction; instead of
notifying the user that it's input was nonnumeric, it would instead claim
that the value was too small. The implementation of the "GetDouble" call in
the deposit function was faulty in two ways: Firstly, it was placed outside
of the try/catch loop, and thus could not trigger the invalid number
response; Secondly, the implementation of "GetDouble" switched from the use
of stod, which throws an exception, to atof, which does not. To squash this
bug I changed the implementation of GetDouble and GetInteger to use the
exception throwing functions, and to return an error value when the number
parse failed. Then, in deposit, I removed the try/catch loop and had the
program check for these error values. As a result, the test no longer
failed.

Printout of Account Balances (Test Iter 5)
====
Problem:
----
Certain test cases failed; as the program was not yet printing out account
balances. Since each of these cases made a call to a function that affected the
balance, a printout of the balance was expected.

Cases Affected:
----
- depo002
- depo004
- depo005
- depo006
- depo007
- enab004
- payb006
- payb007
- payb008
- payb009
- payb010
- payb012
- payb013
- payb014
- with005
- with006
- with007
- with008
- with009
- with010
- with011
- with012
- with013
- with014
- with016

Solution:
---
To resolve this issue, a function was created. This created function calls in
the correct places. While the function call was implemented, none of the above
test cases was corrected by this fix alone.
  
Trailing Whitespace (Test Iter 4):
====
Problem:
----
While fixing test cases, I uncovered another error similar to the newline 
issue covered before: my text editor was stripping trailing whitespace from my
.out files. This became an issue for prompts such as 'Please enter the account
number: ' which have a space in output as part of the formatting in the
program. 

Cases Affected:
----
deposit, withdrawal, enable, paybill

Solution:
----
Since there was no specification in our test cases for how the input
should look as it was being typed, and my intention at the time was warped by
this automatic behaviour, I elected to have the single trailing whitespace be
the correct behaviour and changed the affected .out files accordingly.
  
Double Prompt (Test Iter 3)
====
Problem:
----
The problem was that some of our test cases were failing because there was a
double prompt at the end.

Cases Affected:
----
This must have been an issue for all test cases. 

Solution:
----
The solve for this was to have the loop terminate when end of file was found.
    
Account Balance Forgotten (Test Iter 5)
====
Problem:
----
Certain test cases did not check account balance, and needed to account for
it.

Cases Affected:
----
- depo002

Solution:
----
Update the .out files to contain the balances.
    
Deposit fees not applied (Test Iter 6)
====
Problem:
----
Account balance output did not match account balance input.

Cases Affected:
----
- depo002
- 

Typos
----
- Noticed typo on transfer success message while trying to pass 'depo006.out'
Not directly involved in failures.
- Typo in depo007 on 'withdraw' contributed to failure.
Deposit Prompt
====
- commands.cc:
  - For the deposits in the program, I changed the prompt style to
   "Please enter amount to deposit: ", as used in the test cases. This affected
   the following .out files:
   - all deposit cases
   - dsbl013.out
- Other phrases needed to be changed as well
  
Various things:
----
- depo002
  - bug in .out file: expected charges for admin but not for user
    - balance values were corrected 
- depo004
  depo004.out:
  - initial prompt was not 'Please enter a command:'
  - changed 'enter the user's number' to 'enter the user's account number" for 
    consistency
- depo006
  - depo006.in
    - missing 'standard' login spec
    - found that withdrawal did not deduct from balance
  - depo006.out
    - found that depo006.out sometimes prompted for name in standard mode
  - depo006.trans
    - found that account fees were not accounted for
  - commands.cc
    - found that paybill does not check for company validity
      - fix: added statements to reject transaction if company does not exist
    - found that withdrawal did not print transaction fees separately.
        - fix: split up PushTransactionRecord calls into two, one for amount and other for 
          transaction fees
  - console_input.cc
    - found that function checking company existence was returning flipped result
      - fix: changed == to !=
- depo007
  - found that negative balances could be printed
    - response: added negative balance assertion to print function, and changed the value
      to an absolute one for -0.00.
  - found that held funds were factored into calculation of sufficient balance for deposit
    fee
    - fix: removed amount from calculation
  - couldn't figure out why depo007 was failing after all this
    - fix: moved print of balance to before success/failure for depo, transfer,
      paybill and withdrawal.
    - also found that transfer limit would print for admins, inappropriately, so
      made that behaviour dependent on the admin.
    - found that transaction charge was being stored as a float
      - fix: changed transaction charge type in deposit to double to match
        balance type  
        - depo007.trans
          - transaction charge listed as 04 instead of 01