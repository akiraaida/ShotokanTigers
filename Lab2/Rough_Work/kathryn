Notes:
----
- May have to do transaction fee withdrawal before transaction??? e_e
	- To represent fee, could put marker in MM space for readability?
- For transfers, should system magically know the name of recipient?
- For transfers, should transferred money be available right away?
- Possibility of a 'don't care' character?
- Enter 'your' account number?
	- & 'Please' consistency
	- & New balance consistency
	--> migrate to 'available balance'
- typo on specified
- may have to take consideration of holes somehow(missing enable 4 & 5)
- Should sessions end with a prompt?
	- End with "Please enter session type"?
- transaction width should be 40 but is 41
- fix confusion between person x being whatever and person's account
- do all functions have a positive input combinations/ should works?
- should nonexistent name then ask for an account number?
- make list of responses?
- Display prompt after error? (i.e. fail gracefully)?

Test Cases

	Enable - Kathryn
	================
	[enab000]
  Scenario: Verify disabled account is then enabled
  Test Step: Admin enables an account which is disabled.
  Expected result: Command is accepted.

	[enab001]
  Scenario: Verify only disabled accounts may be enabled.
  Test Step: Admin enables an enabled account.
  Expected Result: Command is rejected.

  [enab002]
  Scenario: Verify normal users can not access the enable feature.
  Test Step: Normal user attempts to use the enable feature.
  Expected Result: The command is rejected.

  [enab003]
  Scenario: Verify account holder's name and account number correspond with each other
  Test Step: Admin enters an incorrect account holder's name but correct account number.
		  			 Admin enters a correct account holder's name but incorrect account number. (Correct name, incorrect number).
	           Admin enters a correct account holder's name but incorrect account number. (Correct name, correct number but not matching).
  Expected Result: The admin is notified the account is not valid.

	[enab004]
	Scenario: Verify future transactions can now be done to a re-enabled account.
	Test Step: Admin enables an account and then withdrawal, transfer,
	paybill, and deposit transactions are tried in both standard and admin mode.
	Then, admin tries the changeplan, & disable transactions.
	Expected Result: The various operations complete sucessfully.

	Withdrawal - Kathryn
	================
  [* Login/logout issues covered elsewhere?]
	[with000]
  Scenario: Verify account holder's name and account number correspond with each other.
  Test Step: Admin and standard try to access names without accounts, with wrong account
			numbers, and with account numbers that do not correspond to the names.
  Expected Result: The user is notified the account is not valid and no changes
			occur.

	[with001]
	Scenario: Verify invalid dollar values are rejected.
	Test Step: Admin and standard try to withdraw 0 and negative dollar (-5)
		values.
	Expected Result: User is informed that only positive values are accepted; no
			withdrawal occurs.

  [with005]
  Scenario: Verify that only #####.## number of decimals is accepted
  Test Step: Try to enter an excessive value as a user.
  Test Step: Try to enter a truncated decimal as a user.
  Test Step: Try to enter a number without a decimal point as a user
  Test Step: Try to enter a number with 3 fractional parts
  Test Step: Enter a number with preceding zeroes.
  Test Step: Enter a number like 5.0
  Test Input:
        login
        John Doe
        withdrawal
        12345
        654321.00
        logout
  Test Input:
        login
        John Doe
        withdrawal
        12345
        .50
        logout
  Test Input:
        login
        John Doe
        withdrawal
        12345
        5
        logout
  Test Input:
        login
        John Doe
        withdrawal
        12345
        5.000
        logout
  Test Input:
        login
        John Doe
        withdrawal
        12345
        00005.00
        logout
  Test Input:
        login
        John Doe
        withdrawal
        12345
        5.0
        logout
  Expected Result: User is informed that their format is invalid.
  Expected Result: User is informed that their format is invalid.
  Expected Result: User is reminded to only use 2 fineness.
  Expected Result: User is informed that a decimal point is required.
  Expected Result: User is informed that their number doesn't make sense.
  Expected Result: User is informed that the incorrect number of zeroes
  following decimal was used.
  Expected Output: - Print: "Please enter your session type: "
           - Print: "Please enter a login name: "
           - Print: "Please enter a command user: "
  Expected Output: - Print: [TODO: after filled everything out]
         - File: [TODO: after filled everything out]

  [with006]
  Scenario: Verrify forbidden symbols are not accepted.
  Test Step: Try to enter a number with preceding dollar sign.
  Test Step: Try to enter a number with trailing dollar sign.
  Test Step: Try to enter a number with comma delimiters.
  Test Input:
        login
        John Doe
        withdrawal
        12345
        $5.00
        logout
  Test Input:
        login
        John Doe
        withdrawal
        12345
        5.00$
        logout
  Test Input:
        login
        John Doe
        withdrawal
        12345
        5,00
        logout
  Expected Result: User is informed that dollar signs are not acceptable.
  Expected Result: User is informed that dollar signs are not acceptable.
  Expected Result: User is reminded to use . to represent decimal
  Expected Output: - Print: "Please enter your session type: "
           - Print: "Please enter a login name: "
           - Print: "Please enter a command user: "
  Expected Output: - Print: [TODO: after filled everything out]
         - File: "No change"

  [with007]
  Scenario: Verify withdrawal input of ###### ## is rejected
  Test Step: Try to enter a number with space delimiters.
  Test Input:
        login
        John Doe
        withdrawal
        12345
        5 00
        logout
  Expected Result: User is informed not to put spaces between their numbers.
  Expected Output: - Print: "Please enter your session type: "
           - Print: "Please enter a login name: "
           - Print: "Please enter a command user: "
  Expected Output: - Print: [TODO: after filled everything out]
         - File: "No change"

  [with008]
  Scenario: Verify withdrawal input of ######.## (legit) is accepted
  Test Step: Enter a number like 5.00
  Test Input:
        login
        John Doe
        withdrawal
        12345
        5.00
        logout
  Expected Result: Transaction occurs successfully
  Expected Output: - Print: "Please enter your session type: "
           - Print: "Please enter a login name: "
           - Print: "Please enter a command user: "
  Expected Output - Print: [TODO: after filled everything out]
         - File: [TODO: same]
  [with009]
  Scenario: Verify only canadian bill values are allowed
  Test Step: Enter a number like 4.99
  Test Step: Try to withdraw 7.00
  Test Input:
        login
        John Doe
        withdrawal
        12345
        4.99
        logout
  Test Input
        login
        John Doe
        withdrawal
        12345
        7.00
        logout
  Expected Result: User is informed that only canadian bill values are
      acceptable.
  Expected Result: user is informed only canadian dollar values are acceptable
  Expected Output: - Print: "Please enter your session type: "
           - Print: "Please enter a login name: "
           - Print: "Please enter a command user: "
  Expected Output: - Print: [TODO: after filled everything out]
         - File: "No change"


  [with010]
  Scenario: Verify dollar value of $5 is accepted
  Test Step: Try to withdraw 5.00 in user mode
  Test Input:
        login
        John Doe
        withdrawal
        12345
        5.00
        logout
  Expected Result: user successfully withdraws 5.00
  Expected Output: - Print: "Please enter your session type: "
           - Print: "Please enter a login name: "
           - Print: "Please enter a command user: "
  Expected Output: - Print: [TODO: after filled everything out]
         - File: [TODO: samesies]

  [with011]
  Scenario: Verify composite dollar value (mixed bills) is accepted
  Test Step: Try to withdraw 15.00
  Test Input:
        login
        John Doe
        withdrawal
        12345
        15.00
        logout
  Expected Result: user successfully withdraws 15.00
  Expected Output: - Print: [TODO: after filled everything out]
         - File: [TODO: samesies]
  [with012]
  Scenario: Verify single account withdraw limit cannot be exceeded
  Test Step: Try to withdraw 505.00 in user mode
  Test Step: Try to withdraw 100.00 then 400.00 in user mode
  Test Step: Login and withdraw twice, over limit
  Test Input: [TODO: invent a rich prince]
  Expected Result:
  Expected Output: [TODO: after things are filled out]

	[with013]
  Scenario: Verify withdrawal transaction fee is applied for standard & are applied for several calls
  Test Step: Try to withdraw [TODO: make 2 of these for student & standard plan uggh]
  Test Input:
  Expected Result:
  Expected Output: [TODO: after things are filled out]

  [with014]
  Scenario: Verify account limits are separate
  Test Step: Withdraw $200 from one, $100 from another
  Test Step: Withdraw $200 from one, $400 from another
  Test Step: Withdraw $600.0 from one acount, $400.0 from another
  Test Input: [TODO: make a guy with 2 accounts]
  Expected Result:
  Expected Output: [TODO: after things are filled out]

  [with015]
  Scenario: Verify single account withdraw limit for admins doesn't apply
  Test Step: As admin, withdraw $600.00
  Test Input: [TODO: invent a rich prince]
  Expected Result:
  Expected Output: [TODO: after things are filled out]

  [with016]
  Scenario: Verify single account withdraw limit for admins does not incur transaction fee
  Test Step: [TODO: make 2 of these for student & standard plan uggh]
  Test Input:
  Expected Result:
  Expected Output: [TODO: after things are filled out]

  [with017]
  Scenario: Verify admin withdrawals do not conflict with user's withdrawal limit
  Test Step: Withdraw $600 from admin then $100 as user
  Test Step: Withdraw $400 as user and $200 as admin
  Test Input: [TODO: invent a rich prince]
  Expected Result:
  Expected Output: [TODO: after things are filled out]

  [with018]
  Scenario: Verify withdrawal with resulting zero balance is accepted
  Test Step: [TODO: after transaction fees have been done (which they have been)]]
  Test Input:
  Expected Result:
  Expected Output: [TODO: after things are filled out]

  [with019]
  Scenario: Verify withdrawal with resulting negative balance is rejected
  Test Step: Withdraw $1 more than balance (within transaction limit)
  Test Input:
  Expected Result:
  Expected Output: [TODO: after things are filled out]

  [with020]
  Scenario: Verify that previous transaction fees are factored into balance calculations
  Test Step: Verify withdrawal with resulting negative balance accounts is rejected (for previous transaction fee from previous withdrawal)
  Test Step: Verify withdrawal with resulting negative balance accounts is rejected (for previous transaction fee from previous transfer)
  Test Step: Verify withdrawal with resulting negative balance accounts is rejected (for previous transaction fee from previous paybill)
  Test Step: Verify withdrawal with resulting negative balance accounts is rejected (for previous transaction fee from previous deposit)
  Test Input:
  Expected Result:
  Expected Output: [TODO: after things are filled out]

  [with021]
  Scenario: Verify transaction fees are applied to only successful withdrawals
  Test Step: Do 5 withdrawals, last of which will fail.
  Test Input:
  Expected Result: 4 moneies and 4 transaction fees are removed.
  Expected Output:

  [with022]
  Scenario: Verify transaction fees are applied for multiple calls
  Test Step: Do 5 withdrawals, leaving a positive balance.
  Test Input:
  Expected Result: 5 monies and 5 transaction fees are applied.
  Expected Output:

  [with023]
  Scenario: Verify withdrawal for resulting negative balance is rejected (on last of multiple calls)
  Test Step: withdraw $100 then above balance
  Test Input:
          login
          John Doe
          withdrawal
          12345
          100.00
          withdrawal
          12345
          11.00
          logout
  Expected Result: $100 is withdrawn.
  Expected Output: [TODO: after everything is filled out]

  [with024]
  Scenario: Verify withdrawal for resulting zero balance is accepted (on last of multiple calls)
  Test Step:
  [TODO: make 2 of these for student & standard plan? uggh]
  Test Input:
  Expected Result:
  Expected Output: [TODO: after things are filled out]

  [with025]
  Scenario: Verify withdrawal for resulting positive balance is accepted (on last of multiple calls)
  Test Step: withdraw multiple times leaving like a $50 buffer or something
  Test Input:
          login
          John Doe
          withdrawal
          12345
          10.00
          withdrawal
          12345
          10.00
          withdrawal
          12345
          10.00
          logout
  Expected Result: $30 is withdrawn.
  Expected Output: [TODO: after everything is filled out.]

  [with026]
  Scenario: Verify withdrawal for resulting negative balance is rejected (over multiple sessions)
  Test Step: [TODO: after corresponding above is fine]
  Test Input:
  Expected Result:
  Expected Output: [TODO: after things are filled out]

  [with027]
  Scenario: Verify withdrawal for resulting zero balance is rejected (over multiple sessions)
  Test Step: [TODO: after corresponding above is fine]
  Test Input:
  Expected Result:
  Expected Output: [TODO: after things are filled out]

  [with028]
  Scenario: Verify withdrawals cannot result in a negative balance
  Test Step: [TODO: after corresponding above is fine]
  Test Step: withdraw like $1 over balance
  Test Input:
          [TODO]
          login
          admin
          withdrawal
          John Doe
          12345
          111.00
          logout
  Expected Result:
  Expected Output: [TODO: after things are filled out]

  [with029]
  Scenario: Verify withdrawal for resulting positive or zero balance is accepted
  Test Step: Verify withdrawal for resulting positive balance is accepted (over multiple sessions)
  Test Step: Verify withdrawal for resulting zero balance is accepted (after session as different user)
  Test Step: Verify withdrawal for resulting positive balance is accepted (after session as different user)
  Test Step: Verify withdrawal for resulting zero balance is accepted (as admin)
  Test Step: withdraw as admin with like $50 buffer
  Test Input:
          [TODO]
          login
          admin
          withdrawal
          John Doe
          12345
          5.00
          logout
  Test Input:
  Expected Result: $5.00 is deducted.
  Expected Result: [TODO]
  Expected Output: [TODO: after things are filled out]



	Paybill - Kathryn
	================
  [* Login/logout issues covered elsewhere?]
  [* CP most from withdraw ]
  [payb000]
  Scenario: Verify the canon companies are accepted
  Test Step: pay a bill to Bright Light Electric Company as user
  Test Step: pay a bill to Credit Card Company Q as user
  Test Step: pay a bill to Low Definition TV, inc as user
  Test Step: pay a bill to Bright Light Electric Company as admin
  Test Step: pay a bill to Credit Card Company Q as admin
  Test Step: pay a bill to Low Definition TV, inc as admin
  Test Input:
  Expected Result:
  Expected Output: [TODO: after things are filled out]

  [payb001]
  Scenario: Verify invalid company names are not accepted
  Test Step: try to pay a bill to BS as user
  Test Step: try to pay a bill to SBS as user
  Test Step: try to pay a bill to S as user
  Test Step: try to pay a bill to TVI as user
  Test Step: try to pay a bill to BS as admin
  Test Step: try to pay a bill to SBS as admin
  Test Step: try to pay a bill to S as admin
  Test Step: try to pay a bill to TVI as admin
  Test Step: try to pay a bill to CE as user
  Test Input:
  Expected Result:
  Expected Output: [TODO: after things are filled out]






	Deposit - Kathryn
	================
  [* Login/logout issues covered elsewhere?]
  [* CP most from withdraw ]

  [depo000]
  { [TODO: Verify deposited funds have gone into the ether]
  Scenario: Verify deposited funds cannot be withdrawn
  Test Step: put in balance and then withdraw previous balance + 1 as user
  Test Input:
  Expected Result:
  Expected Output: [TODO: after things are filled out]

  Scenario: Verify deposited funds cannot be used with paybill
  Test Step: put in that amount up there and then pay a bill as user
  Test Input:
  Expected Result:
  Expected Output: [TODO: after things are filled out]

  Scenario: Verify deposited funds cannot be transferred from deposited account to account
  Test Step: transfer it
  Test Input:
  Expected Result:
  Expected Output: [TODO: after things are filled out]

  Scenario: Verify deposited funds cannot be transferred from account to deposited account
  Test Step: transfer it
  Test Input:
  Expected Result:
  Expected Output: [TODO: after things are filled out]
  }
